/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        if (!head || !head->next || !head->next->next) return {-1, -1};

        vector<int> critical_points;
        ListNode* prev = head;
        ListNode* curr = head->next;
        ListNode* temp = curr->next;
        int node_count = 2;

        while (temp) {
            if ((curr->val > prev->val && curr->val > temp->val) || (curr->val < prev->val && curr->val < temp->val)) {
                critical_points.push_back(node_count);
            }
            prev = curr;
            curr = temp;
            temp = temp->next;
            node_count++;
        }

        if (critical_points.size() < 2) return {-1, -1};

        int min_distance = INT_MAX;
        for (int i = 1; i < critical_points.size(); ++i) {
            min_distance = min(min_distance, critical_points[i] - critical_points[i - 1]);
        }
        int max_distance = critical_points.back() - critical_points.front();

        return {min_distance, max_distance};
    }
};
